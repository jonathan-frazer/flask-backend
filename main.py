import pandas as pd
import pprint
import module_webscraper
from module_langchain import MistralLLM

# --- Main Logic Function ---
def get_results(company_name, max_budget):
    print(f"Company Name: {company_name}, Max Budget: {max_budget}")

    # Read energy consumption CSV
    df = pd.read_csv('energy_consumption.csv')

    print(f"Dataframe:\n{df}")

    #Scrape Amazon(Sariya) - Done
    devices_df = df.sort_values(by='Energy Consumed (kWh)', ascending=False)
    amazon_results_df = module_webscraper.search_amazon_from_df(devices_df)
    amazon_results_df.reset_index(inplace=True)
    amazon_results_df.to_csv('amazon_results.csv', index=False)

    #Find the best match Among the listed devices to buy(Sreehari)
    """ 
    Use the Amazon Results Data Frame to find the best match
    """

    energy_text = devices_df.to_string(index=False)
    amazon_text = amazon_results_df.drop('url', axis=1).to_string(index=False)
 
    prompt=f"""
    You are given the Role of a Data processor, **You can only return CSV Files any other data, even response text is NOT PERMITTED**

    Given the Dataset:-\n{amazon_text}
    And the Energy Consumption Data:-\n{energy_text}
    Budget: {max_budget}

    Perform the Following Tasks:-\n
    1. Using the 'Rating' field in the Dataset [0-5], find out the Power Rating for each of the items in Watts. If not present, estimate it from the Star Rating.
    2. From this Power Rating, find out the most efficient Items to buy. Keeping within Max Budget. Try Utilizing a Greedy approach taking ratio of Power:Price into account.
    3. Once these items are found, Add their index values to the corresponding Energy Consumption Data row, in a new column called called 'mapIndex'. For ones without a mapIndex, fill it with -1. Once done *return the ONLY new CSV File.*
    """
    
    llm=MistralLLM()
    print(prompt)
    response=llm.invoke(prompt)

    print("Hariharan - Response:\n",response)

    #Write to CSV
    with open('llm_response.csv', 'w') as f:
        f.write(response.replace("```csv\n",'').replace("```",''))

    #Read to Data Frame
    response_df = pd.read_csv('llm_response.csv')
    response_df = response_df[response_df['mapIndex'] != -1]
    
    #Map the Data using JOIN and Perform Cleaning
    mapped_df = pd.merge(response_df, amazon_results_df, how='left', left_on='mapIndex', right_on='index').drop(columns=['mapIndex', 'index'])    
    print(mapped_df)
    mapped_df['Power Rating (W)'] = mapped_df.apply(lambda row: row['Power Rating (W)'] *(1.0-0.2*row['rating']), axis=1)
    mapped_df['Energy Consumed (kWh)'] = mapped_df['Power Rating (W)'] * mapped_df['Total Runtime (hrs)'] / 1000
    mapped_df['Total Cost (INR)'] = mapped_df['Energy Consumed (kWh)'] * mapped_df['Cost per kWh (INR)']
    mapped_df = mapped_df.sort_values(by='value')
    cum_sum = 0
    filtered_df = pd.DataFrame(columns=mapped_df.columns)
    for index, row in mapped_df.iterrows():
        if (cum_sum + row['value']) < max_budget:
            cum_sum += row['value']
            filtered_df = filtered_df._append(row)

    mapped_df = filtered_df
    print(filtered_df)
    mapped_df.to_csv('llm_mapped_data.csv', index=False)

    improved_df = df.copy()
    common_cols = improved_df.columns.intersection(mapped_df.columns)
    improved_df.update(mapped_df[common_cols])
    improved_df = improved_df[df.columns]
    improved_df.to_csv('improved_energy_consumption.csv', index=False)
    
    mapped_df = pd.read_csv('llm_mapped_data.csv').rename(columns={'Device Name': 'name'})
    chartData = mapped_df[["name", "value", "url"]].to_dict('records')
    
    #Generate the Projections(Cherishma & Madhu)
    """
    Use initial consumption data to generate initial projection
    Then Use Sreehari's results to generate the data for the next months. 
    """

    original_sum = round(float(df['Total Cost (INR)'].sum()),2)
    improved_sum = round(float(improved_df['Total Cost (INR)'].sum()),2)

    #Generate Summary(Glen)
    """
      Relatively small job, feeding into LLM.
    """
    summary_prompt = f"""
    You are an energy efficiency consultant. Your task is to analyze the energy consumption of the following company and provide a General summary.

    Company: {company_name}
    Maximum Budget: â‚¹{max_budget}
    Energy Consumption Data:{energy_text}
    
    Be Short and concise. Do not try any other formatting like **,
    Return your answer in a simple paragraph without only a few figures
    """
    
    summary_response = llm.invoke(summary_prompt)
    print("Debug - LLM Response:(glen)", summary_response)
    

    # Example of how the RESPONSE should look like, follow the same SCHEMA
    #"message" : Returns a Message summary generated by the LLM
    #"chartData" : Returns a List of new Items that are suggested to purchase.
    #   "name" - Name of the Item
    #   "value" - Value of the Item
    #   "url" - URL of the Item
    #"budgetComparisonData" : Returns values for each month
    #   "month" - Name of the Month
    #   "initial" - Takes the consumption data raw and showcases what it will be for the month
    #   "improved" - Modifies "initial" and showcases what it will be for the month with the replaced items
    #
    # Sample Output is given below 
    return {
            "message": summary_response,
            "chartData": chartData,
            "budgetComparisonData": [
                {"month": "Jan", "initial": original_sum * 0.1196, "improved": improved_sum * 0.1196},
                {"month": "Feb", "initial": original_sum * 0.1254, "improved": improved_sum * 0.1254},
                {"month": "Mar", "initial": original_sum * 0.1323, "improved": improved_sum * 0.1323},
                {"month": "Apr", "initial": original_sum * 0.1161, "improved": improved_sum * 0.1161},
                {"month": "May", "initial": original_sum * 0.1275, "improved": improved_sum * 0.1275},
                {"month": "Jun", "initial": original_sum * 0.1201, "improved": improved_sum * 0.1201},
                {"month": "Jul", "initial": original_sum * 0.1321, "improved": improved_sum * 0.1321},
                {"month": "Aug", "initial": original_sum * 0.1269, "improved": improved_sum * 0.1269},
            ],
        }

#Gives example of output if run directly
if __name__ == '__main__': 
    print("\n\nInput:-")
    result_data = get_results("Chandan Enterprises", 100000)
    print("\n\nOutput:-")
    pprint.pprint(result_data)
